[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yudum Pa√ßin",
    "section": "",
    "text": "This progress journal covers Yudum Pa√ßin‚Äôs work during their term at BDA 503 Fall 2022.\nEach section is an assignment or an individual work."
  },
  {
    "objectID": "assignment1.html",
    "href": "assignment1.html",
    "title": "1¬† Assigment 1",
    "section": "",
    "text": "Hello everyone! My names is Yudum Pa√ßin. I was born in Bursa, Mudanya, i‚Äôve lived in Mudanya until I went to Ankara for my university education. Now, I have been working as an IT Business Analyst in VakifBank for 6 years. Nowadays, I am about to switch my career path to be a Data Scientist üòÄ. My interest of data science area started in 2019 with the famous Coursera course ‚ÄúMachine Learning‚Äù from Andrew Ng, which i think no longer exists as one course but is converted to a Machine Learning Specialization. But before that, i was in this area before realizing that i am. Let me explain this!\n\n\n\n\nHere is The ‚ÄúMachine Learning Course‚Äù that brought me here\n\n\n\nFirst of all, I am a Mathematician. I graduated from Mathematics department of Middle East Technical University in 2012. After graduation, i was sure that my profession will be in the IT sector, but i didn‚Äôt know where to start. To improve my knowledge in software development, I completed my master‚Äôs degree in Information Systems at METU. I also worked as a full-time Research Assistant while i was studying. During my graduate years, i was doing data manipulation, statistical tests, like correlation tests, ANOVA etc., However, this whole process was only a tool for me, i was focused on results not the process. Simply, IBM SPSS was doing it for me. When i first understood the idea behind linear regression with the Machine Learning Course from Coursera i was fascinated with the idea of using Math for this way. As a data science enthusiast and future-data scientist, i want to use machine learning skills to automate the repetitive tasks. I think if there is a work that computers can handle better or equal than humans, then we should find a new way to automate it. Deep learning models are doing great at computer vision and NLP areas, they are almost as successful as the human cognitive level: Alphago, Ensembled deep learning model outperforms human experts in diagnosing.., Microsoft‚Äôs Deep Learning Project Outperforms Humans In Image Recognition\nI am also planning to work on time series models and marketing analytics.\nYou can reach out to me on my linkedin page."
  },
  {
    "objectID": "assignment1.html#advocating-for-automation",
    "href": "assignment1.html#advocating-for-automation",
    "title": "1¬† Assigment 1",
    "section": "1.2 Advocating for Automation",
    "text": "1.2 Advocating for Automation\nThis section is from the RStudio talk ‚ÄúAdvocating for Automation: Adapting Current Tools in Environmental Science through R‚Äù by Hannah Podzorski, GSI Envronmental. Podzorski points out the importance of automation for diverse skilled teams and how it can be applied with R. You can reach the full version of the talk from rstudio::conf(2022) link\nThe reason why I chose this topic is that I am also trying to find a new way to automate the repetitive tasks and create time for more important ones.\nAutomation has many pros like\n\nReproducibility\nSimplicity\nSaving time\nLess human interaction which means less errors\n\nBut, where to start automation? Podzorski suggests to start small. She and other team members first decide to start to automate the process with Microsoft Excel Products using R.\n{openxlsx} : an R package designed to edit, read and create Excel files.\nopenxlsx::write.xlsx(data,\"data.xlsx\")\nThe other useful package is {officer}. Officer is used to manipulate word documents and PowerPoints in R. The github page shows how to use it.\nThe last important package is {rvg}, rvg has a function dml which enables the edit ggplot object option before exporting it to a PowerPoint file.\nThe team of Podzorski later decides to use their automation skills to use ProUCL in a more efficient way. ProUCL is a comprehensive statistical software designed for analyzing enviromental data. The team uses the ProUCL by loading the data and exporting the results for further analysis or reports. In case of loading large data inputs, the software crashes or runs slowly. Because of these reasons, the team decides to automate this process with ‚ÄúMini-Mouse Macro‚Äù. First a function in R, subsets the large data in more manageable chunks, then the mouse macro takes these input files, clicks though the software for getting statistics and finally saves the output file. This can be seen as a small task to automate but when the number of files increases, the time for a human to do this task one by one becomes unmanageable. Also, the team automate the work of copy-paste ProUCL outputs to Excel. As a result of this automation process, the team saves more time for data analysis and creating insights from the results."
  },
  {
    "objectID": "assignment1.html#r-posts",
    "href": "assignment1.html#r-posts",
    "title": "1¬† Assigment 1",
    "section": "1.3 3 R Posts",
    "text": "1.3 3 R Posts\nIn this section, 3 R posts I chose will be summarized and discussed.\n\n1.3.1 PCA vs Autoencoders for Dimensionality Reduction\nYou can reach the full version of article from the link\nWhen our data set has too many dimensions, it is a wise desicion to go on with the important ones and leave others. But how to choose important ones? This article compares two methods for dimension reduction, PCA and Autoencoders with R using the Australian Institute of Sport data set.\nPrincipal Components Analysis (PCA)\nPCA is a process of reducing the data frame by orthogonality transforming the data into a set of principal components. The first principal component explains the most amount of the variation in the data in a single component, the second component explains the second most amount of the variation, and so on. By choosing the top k principal components that explain say 80-90% of the variation, the other components can be dropped since they do not significantly benefit the model.\nTo investigate the variation in the data. Plotting the data points in 3 dimensions gives a better indication of the structure of the data. However, there can be still many dimensions which explain some of the variation that are not visualized. To do so they would all need to be plotted in their various combinations. This is a draw back of PCA.\n# standardise\nminmax <- function(x) (x - min(x))/(max(x) - min(x))\nx_train <- apply(ais[,1:11], 2, minmax)\n# PCA\npca <- prcomp(x_train)\nAutoencoder\nThe autoencoder can be constructed using the keras package. As with any neural network there is a lot of flexibility in how autoencoders can be constructed such as the number of hidden layers and the number of nodes in each. With each hidden layer the network will attempt to find new structures in the data. In general autoencoders are symmetric with the middle layer being the bottleneck. The first half of the autoencoder is considered the encoder and the second half is considered the decoder.\n# set training data\nx_train <- as.matrix(x_train)\n# set model\nmodel <- keras_model_sequential()\nmodel %>%\n  layer_dense(units = 6, activation = \"tanh\", input_shape = ncol(x_train)) %>%\n  layer_dense(units = 2, activation = \"tanh\", name = \"bottleneck\") %>%\n  layer_dense(units = 6, activation = \"tanh\") %>%\n  layer_dense(units = ncol(x_train))\n# view model layers\nsummary(model)\n\n# compile model\nmodel %>% compile(\n  loss = \"mean_squared_error\", \n  optimizer = \"adam\"\n)\n\n# fit model\nmodel %>% fit(\n  x = x_train, \n  y = x_train, \n  epochs = 2000,\n  verbose = 0\n)\n\n# evaluate the performance of the model\nmse.ae2 <- evaluate(model, x_train, x_train)\nmse.ae2\n\n\n\n\n\nFigure: 1 - Structure of an Autoencoder\n\n\nImage source: https://www.geeksforgeeks.org/ml-auto-encoders/\n\nTo summarize, some key differences for consideration between PCA and autoencoders are:\n1- There are no guidelines to choose the size of the bottleneck layer in the autoencoder unlike PCA. With PCA, the top k components can be chosen to factor in x% of the variation. Often PCA can be used as a guide to choose k.\n2- The autoencoder tends to perform better when k is small.\n3- Autoencoders require more computation than PCA..\n\n\n1.3.2 Audio classification with torch\nIn this article classification of audio using R torch is examined. I have tried audio classification with spectograms using Keras tensorflows with Python before, so this topic got my attention.\nYou can reach the full version of article from the link\nThe dataset for this study holds recordings of thirty different one- or two-syllable words, uttered by different speakers. There are about 65,000 audio files. 4 properties are give for each file,\nwaveform, sample_rate, label_index, and label.\n\n\n\n\nFigure 2.1 - The spoken word ‚Äúbird‚Äù: Sound wave\n\n\n\nThis representation is actually difference of loudness of voice over time. Author suggests that even the domain experts can conclude that this is not enough for sound classification. To get more meaningful transformation, fourier-transform method is applied for getting a representation of sound in a way that had no information about time at all and have as just as much information as original signal. In R torch_fft_fft function is used, where fft stands for Fast Fourier Transform.\n\n\n\n\nFigure 2.2 - The spoken word ‚Äúbird‚Äù: Discrete Fourier Transform\n\n\n\nFrom this alternate representation, original sound wave can be calculated by taking the frequencies present in the signal, weighting them according to their coefficients, and adding them up. But in sound classification, timing information must surely matter, for this reason another represenaiton is necessary.\nWe can divide the signal into small chunks, and run the Fourier Transform on each of them. This representation is called the spectrogram.\n\n\n\n\nFigure 2.3 - A spectogram\n\n\n\nThe spectrogram is a two-dimensional representation: an image. From now on, we can use convolutional neural networks for image recognition using library(torch).\n\n\n\n\n\n1.3.3 Update Your Machine Learning Pipeline With vetiver and Quarto\nThe reason I chose this article is I am curious about how the models are created and deployed in real-life. How is the Machine Learning Pipeline process works?\nYou can reach the full version of article from the link\nMachine learing operations (MLOps) are a set of practices for running ML models in production environments. Vertier, an open-source framework for entire morel life cycle, provides R an and Pyhton developers a unified way for working with ML models.\nIn this article, Bike Prediction App is used. The app provides real-time predictions of the number of bikes at stations across the city, Washington D.C.. The end to end machine learning pipeline uses R to modify and import the data, saves it in a pin, which is a package publishes data, models, and other R objects. Then the pipeline developes a model and moves the model to a deployable location.\nThe topic of this article focuses on updating the MLOps using the new vertier framework and Quarto.\nCreating An End-to-End Machine Learning Pipeline\n1. Create a custom package for pulling data\nThe data is pulled from Capital Bikeshare API. The team developed a R package to reuse the functions pulling the data from API when it is requested.\n2. Extract, transform, load process in R\nThe data from API is raw data, is written on Database. The station info is also written to a pin. This pin will be accessed by the Shiny app so that it can extract the bike station info without connecting to the database.\nThis step is also called ETL Step 1 - Raw Data Refresh\n3. Tidy and join datasets\nIn this phase raw bike data is preprocessed with tidyverse package. Then the bike data is joint with station data. The output data is written to DataBase as a new table.\nThis step is also called ETL Step 2 - Tidy Data\n4. Train and deploy the model\nThe table resulted from Step 3 is trained with Random Forest Model. The model is saved to RStudio Connect as a pin (using vetiver) and then it is converted into an API endpoint (also using vetiver). Then, the team deployed the API to RStudio Connect.\n5. Create a model card\nThis step includes, evaluation of training and evaluation data by different methods. Vetiver‚Äôs model card template helps document essential facts and considerations of the deployed model.\n6. Monitor model metrics\nTo ensure the consistency of the moddel, the metrics should be monitored. For this prurpose, model performance is documented using vetiver and the metrics are written to a pin on RStudio Connect.\n7. Deploy a Shiny app that displays real-time predictions\nAPI endpoint is used to serve predictions to a Shiny app interactively. Clicking on a station shows us a line graph of the time and predicted number of bikes.\n8. Create project dashboard\nThe team has created a dashboard for sharing the full context of this project.\n\nThanks for reading‚Ä¶"
  },
  {
    "objectID": "inclass1.html",
    "href": "inclass1.html",
    "title": "2¬† In Class Exercise 1",
    "section": "",
    "text": "Install necessary packages\n\ninstall.packages(\"tidyverse\")\ninstall.packages(\"nycflights13\")\n\nCall necessary libraries\n\nlibrary(tidyverse)\nlibrary(nycflights13)\n\nIn this exercise, we will explore planes dataset in nycflights13 library planes, consists of construction information about 3,322 planes used for all flights departing NYC in 2013.\n\nglimpse(planes)\n\nRows: 3,322\nColumns: 9\n$ tailnum      <chr> \"N10156\", \"N102UW\", \"N103US\", \"N104UW\", \"N10575\", \"N105UW‚Ä¶\n$ year         <int> 2004, 1998, 1999, 1999, 2002, 1999, 1999, 1999, 1999, 199‚Ä¶\n$ type         <chr> \"Fixed wing multi engine\", \"Fixed wing multi engine\", \"Fi‚Ä¶\n$ manufacturer <chr> \"EMBRAER\", \"AIRBUS INDUSTRIE\", \"AIRBUS INDUSTRIE\", \"AIRBU‚Ä¶\n$ model        <chr> \"EMB-145XR\", \"A320-214\", \"A320-214\", \"A320-214\", \"EMB-145‚Ä¶\n$ engines      <int> 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, ‚Ä¶\n$ seats        <int> 55, 182, 182, 182, 55, 182, 182, 182, 182, 182, 55, 55, 5‚Ä¶\n$ speed        <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N‚Ä¶\n$ engine       <chr> \"Turbo-fan\", \"Turbo-fan\", \"Turbo-fan\", \"Turbo-fan\", \"Turb‚Ä¶\n\n\n10 Most common models, manufacturers of the planes are,\n\nplanes %>% \n  group_by(model,manufacturer) %>%\n  summarise(say=n()) %>%\n  arrange(desc(say),10)\n\n# A tibble: 147 √ó 3\n# Groups:   model [127]\n   model       manufacturer                    say\n   <chr>       <chr>                         <int>\n 1 737-7H4     BOEING                          361\n 2 CL-600-2B19 BOMBARDIER INC                  162\n 3 A320-232    AIRBUS                          129\n 4 A320-232    AIRBUS INDUSTRIE                127\n 5 CL-600-2D24 BOMBARDIER INC                  123\n 6 737-824     BOEING                          122\n 7 EMB-145LR   EMBRAER                         114\n 8 737-3H4     BOEING                          105\n 9 EMB-145XR   EMBRAER                         104\n10 MD-88       MCDONNELL DOUGLAS AIRCRAFT CO   103\n# ‚Ä¶ with 137 more rows\n\n\n737-7H4 BOEING is the most common plane, Let‚Äôs have a look at this plane in detail\n737-7H4 is a BOEING model only!, There is no other manufacturer. So, we can filter with ‚Äúmodel‚Äù only.\n\nplanes %>% \n  filter(model=='737-7H4' & manufacturer!='BOEING') \n\n# A tibble: 0 √ó 9\n# ‚Ä¶ with 9 variables: tailnum <chr>, year <int>, type <chr>,\n#   manufacturer <chr>, model <chr>, engines <int>, seats <int>, speed <int>,\n#   engine <chr>\n\n\nIn, what years 737-7H4 is constructed, and how many?\n\nplanes %>% \n  filter(model=='737-7H4') %>%\n  group_by(year) %>%\n  summarise(say=n())\n\n# A tibble: 16 √ó 2\n    year   say\n   <int> <int>\n 1  1997     3\n 2  1998    22\n 3  1999    32\n 4  2000    32\n 5  2001    27\n 6  2002    10\n 7  2003    18\n 8  2004    48\n 9  2005    32\n10  2006    33\n11  2007    36\n12  2008    22\n13  2009    13\n14  2010    11\n15  2011    16\n16    NA     6\n\n\nSince 1997, 737-7H4 is constructed and used in NYC Airlines. There are 6 planes having missing year values. In 2004, number of 737-7H4 planes is at the peak, after 2004 number of 737-7H4 planes are decreasing, but still it is the most common plane model in NYC flights."
  }
]