[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "[STUDENT/GROUP NAME] Progress Journal",
    "section": "",
    "text": "This progress journal covers [STUDENT NAME SURNAME / PROJECT GROUP NAME]‚Äôs work during their term at BDA 503 Fall 2022.\nEach section is an assignment or an individual work."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1¬† Introduction",
    "section": "",
    "text": "See Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. ‚ÄúLiterate Programming.‚Äù Comput. J. 27 (2): 97‚Äì111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2¬† Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. ‚ÄúLiterate Programming.‚Äù Comput.\nJ. 27 (2): 97‚Äì111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "assignment1.html",
    "href": "assignment1.html",
    "title": "1¬† Assigment 1",
    "section": "",
    "text": "Hello everyone! My names is Yudum Pa√ßin. I was born in Bursa, Mudanya, i‚Äôve lived in Mudanya until I went to Ankara for my university education. My family still lives there. I have been living in ƒ∞stanbul for 6 years now. I have been working as an IT Business Analyts in VakifBank for 6 years now. However, I am about to switch my career to be a Data Scientist üòÄ. My interest of data science area started in 2019 with the famous Coursera course ‚ÄúMachine Learning‚Äù from Andrew Ng, which i think no longer exists as one course but is converted to a Machine Learning Specialization. But before that, i was in this area before realizing that i am. Let me explain this!\n\n\n\n\nHere is The ‚ÄúMachine Learning Course‚Äù that brought me here\n\n\n\nFirst of all, I am a Mathematician. I was graduated from Mathematics department of Middle East Technical University in 2012. After graduation, i was sure that my profession will be in the IT sector, but i didn‚Äôt know where to start. To improve my knowledge in software development, i began my Msc degree in Informatics Institute, METU. I‚Äôve also worked as a Research Assistant. Through my graduate years i was doing data manipulation, statistical tests, like correlation tests, ANOVA etc., However, this whole process was only a tool for me, i was focused on results not the process. Simply, IBM SPSS was doing it for me. When i first understood the idea behind linear regression with the Machine Learning Course from Coursera i was fascinated with the idea of using Math for this way. As a data science enthusiast and future-data scientist, i want to use machine learning skills to automate the repetitive jobs. I think our human brains deserve better jobs. What i mean by repetitive jobs can be document classification, e-mail replying, classification of incident records from production environments, testing user interfaces etc. Even, reporting to manager can be a machine learning idea for me. To sum up, if there is a work that computers can handle better or equal than humans, then we should find a new way to automate it. Deep learning models are doing great at computer vision and NLP areas, even they are now as successful as human cognitive level in some areas: Alphago, Ensembled deep learning model outperforms human experts in diagnosing.., Microsoft‚Äôs Deep Learning Project Outperforms Humans In Image Recognition\nOther than giving humans more respectable jobs and leave others to AI üòÄ, i am planning to work on time series models to predict future and also marketing analytics.\nYou can reach me via my linkedin page."
  },
  {
    "objectID": "assignment1.html#advocating-for-automation",
    "href": "assignment1.html#advocating-for-automation",
    "title": "1¬† Assigment 1",
    "section": "1.2 Advocating for Automation",
    "text": "1.2 Advocating for Automation\nThis section is from the RStudio talk ‚ÄúAdvocating for Automation: Adapting Current Tools in Environmental Science through R‚Äù by Hannah Podzorski, GSI Envronmental. Podzorski points out the importance of automation for diverse skilled teams and how they applied it with R. You can reach the talk from rstudio::conf(2022) link\nThe reason I chose this topic is that I am also trying to find a new ways to automate the repetitive office works and create more time for more valuable jobs.\nAutomation has many pros like\n\nReproducibility\nIt can be simple\nSaves time\nLess human interaction means less errors\n\nBut, where to start automation? Podzorski suggest that start small, and she and team members decide to start to automate the process with Microsoft Excel Products.\n{openxlsx} : this package is designed for edit, read and create Excel files in R. The team members used to edit the csv files, because the write.csv(data,\"data.csv\") command. Once the programmer start to use openxlsx, it saved more time for analysts to analyze rather than editing the csv file.\nopenxlsx::write.xlsx(data,\"data.xlsx\")\nThe other useful package is {officer}. Officer is used to manuplate word documents and PowerPoints in R. The github page shows how to use it.\nThe last important package is {rvg}, rvg has a function dml which enables the edit ggplot object option before exporting it to a PowerPoint file.\nThe team of Podzorski later decides to use their automation skills with ProUCL. ProUCL is statistics software for Left Censored Enviromental data, developed by the US Environmental Protection Agency (EPA). The team loads the data and export the results for further analysis and creating reports. In case of large datasets, the software crashes or takes longer time to process. Because of these reasons, the team decides to automate this process with ‚ÄúMini-Mouse Macro‚Äù. First a function in R, subsets the large data in more managable chunks, and then the mouse macro takes these input files, and clicks though the software for getting statistics and saves the output file to PC. This can be seen as a small task to automate but when the number of files increase, the time for a human to do it one by one becomes tedious. Also, they automate the work of copy-paste ProUCL outputs to Excel. Finally, the team were able to save more time to focus on data analysis."
  },
  {
    "objectID": "assignment1.html#r-posts",
    "href": "assignment1.html#r-posts",
    "title": "1¬† Assigment 1",
    "section": "1.3 3 R Posts",
    "text": "1.3 3 R Posts\nIn this section, 3 R posts I chose will be summarized and discussed.\n\n1.3.1 PCA vs Autoencoders for Dimensionality Reduction\nYou can reach the full version of article from the link\nWhen our data set has too many dimensions, it is a wise desicion to go on with the important ones and leave others. But how to choose important ones? This article compares two methods for dimension reduction, PCA and Autoencoders with R using the Australian Institute of Sport data set.\nPrincipal Components Analysis (PCA)\nPCA reduces the data frame by orthogonally transforming the data into a set of principal components. The first principal component explains the most amount of the variation in the data in a single component, the second component explains the second most amount of the variation, etc. By choosing the top k principal components that explain say 80-90% of the variation, the other components can be dropped since they do not significantly benefit the model.\nTo investigate the variation in the data. Plotting the data points in 3 dimensions gives a better indication of the structure of the data. However, there can be still many dimensions which explain some of the variation that are not visualised. To do so they would all need to be plotted in their various combinations. This is a draw back of PCA.\n# standardise\nminmax <- function(x) (x - min(x))/(max(x) - min(x))\nx_train <- apply(ais[,1:11], 2, minmax)\n# PCA\npca <- prcomp(x_train)\n# plot cumulative plot\nqplot(x = 1:11, y = cumsum(pca$sdev)/sum(pca$sdev), geom = \"line\")\n\nFrom this plot, it can be concluded that first 6 components account for approximately 90% of the variation in the data.\nAutoencoder\nThe autoencoder will be constructed using the keras package. As with any neural network there is a lot of flexibility in how autoencoders can be constructed such as the number of hidden layers and the number of nodes in each. With each hidden layer the network will attempt to find new structures in the data. In general autoencoders are symmetric with the middle layer being the bottleneck. The first half of the autoencoder is considered the encoder and the second half is considered the decoder.\n# set training data\nx_train <- as.matrix(x_train)\n# set model\nmodel <- keras_model_sequential()\nmodel %>%\n  layer_dense(units = 6, activation = \"tanh\", input_shape = ncol(x_train)) %>%\n  layer_dense(units = 2, activation = \"tanh\", name = \"bottleneck\") %>%\n  layer_dense(units = 6, activation = \"tanh\") %>%\n  layer_dense(units = ncol(x_train))\n# view model layers\nsummary(model)\n\n# compile model\nmodel %>% compile(\n  loss = \"mean_squared_error\", \n  optimizer = \"adam\"\n)\n\n# fit model\nmodel %>% fit(\n  x = x_train, \n  y = x_train, \n  epochs = 2000,\n  verbose = 0\n)\n\n# evaluate the performance of the model\nmse.ae2 <- evaluate(model, x_train, x_train)\nmse.ae2\n\n\n\n\n\nFigure: 1 - Structure of an Autoencoder\n\n\nImage source: https://www.geeksforgeeks.org/ml-auto-encoders/\n\nTo summarise, the key differences for consideration between PCA and autoencoders are:\n1- There are no guidelines to choose the size of the bottleneck layer in the autoencoder unlike PCA. With PCA, the top k components can be chosen to factor in x% of the variation. Often PCA can be used as a guide to choose k.\n2- The autoencoder tends to perform better when k is small when compared to PCA, meaning the same accuracy can be achieved with less components and hence a smaller data set. This is important when dealing with very large data sets.\n3- When visualising the PCA output, in general the first 2 or 3 components are used. The drawback is the other components are not visable on the plot and therefore not seeing all the information. Different combinations of dimensions will need to be plotted. Autoencoders can be constructed to reduce the full data down to 2 or 3 dimensions retaining all the information which can save time.\n4- Autoencoders require more computation than PCA. Although, for very large data sets that can‚Äôt be stored in memory, PCA will not be able to be performed. The autoencoder construction using keras can easily be batched resolving memory limitations.\n\n\n1.3.2 Audio classification with torch\nIn this article classification of audio using R torch is examined. I have tried audio classification with spectograms using Keras tensorflows with Python before, so this topic got my attention.\nYou can reach the full version of article from the link\nThe dataset for this study holds recordings of thirty different one- or two-syllable words, uttered by different speakers. There are about 65,000 audio files. 4 properties are give for each file,\nwaveform, sample_rate, label_index, and label.\n\n\n\n\nFigure 2.1 - The spoken word ‚Äúbird‚Äù: Sound wave\n\n\n\nThis representation is actually difference of loudness of voice over time. Author suggests that even the domain experts can conclude that this is not enough for sound classification. To get more meaningful transformation, fourier-transform method is applied for getting a representation of sound in a way that had no information about time at all and have as just as much information as original signal. In R torch_fft_fft function is used, where fft stands for Fast Fourier Transform.\n\n\n\n\nFigure 2.2 - The spoken word ‚Äúbird‚Äù: Discrete Fourier Transform\n\n\n\nFrom this alternate representation, original sound wave can be calculated by taking the frequencies present in the signal, weighting them according to their coefficients, and adding them up. But in sound classification, timing information must surely matter, for this reason another represenaiton is necessary.\nWe can divide the signal into small chunks, and run the Fourier Transform on each of them. This representation is called the spectrogram.\n\n\n\n\nFigure 2.3 - A spectogram\n\n\n\nThe spectrogram is a two-dimensional representation: an image. From now on, we can use convolutional neural networks for image recognition using library(torch).\n\n\n\n\n\n1.3.3 Update Your Machine Learning Pipeline With vetiver and Quarto\nThe reason I chose this article is I am curious about how the models are created and deployed in real-life. How is the Machine Learning Pipeline process works?\nYou can reach the full version of article from the link\nMachine learing operations (MLOps) are a set of practices for running ML models in production environments. Vertier, an open-source framework for entire morel life cycle, provides R an and Pyhton developers a unified way for working with ML models.\nIn this article, Bike Prediction App is used. The app provides real-time predictions of the number of bikes at stations across the city, Washington D.C.. The end to end machine learning pipeline uses R to modify and import the data, saves it in a pin, which is a package publishes data, models, and other R objects. Then the pipeline developes a model and moves the model to a deployable location.\nThe topic of this article focuses on updating the MLOps using the new vertier framework and Quarto.\nCreating An End-to-End Machine Learning Pipeline\n1. Create a custom package for pulling data\nThe data is pulled from Capital Bikeshare API. The team developed a R package to reuse the functions pulling the data from API when it is requested.\n2. Extract, transform, load process in R\nThe data from API is raw data, is written on Database. The station info is also written to a pin. This pin will be accessed by the Shiny app so that it can extract the bike station info without connecting to the database.\nThis step is also called ETL Step 1 - Raw Data Refresh\n3. Tidy and join datasets\nIn this phase raw bike data is preprocessed with tidyverse package. Then the bike data is joint with station data. The output data is written to DataBase as a new table.\nThis step is also called ETL Step 2 - Tidy Data\n4. Train and deploy the model\nThe table resulted from Step 3 is trained with Random Forest Model. The model is saved to RStudio Connect as a pin (using vetiver) and then it is converted into an API endpoint (also using vetiver). Then, the team deployed the API to RStudio Connect.\n5. Create a model card\nThis step includes, evaluation of training and evaluation data by different methods. Vetiver‚Äôs model card template helps document essential facts and considerations of the deployed model.\n6. Monitor model metrics\nTo ensure the consistency of the moddel, the metrics should be monitored. For this prurpose, model performance is documented using vetiver and the metrics are written to a pin on RStudio Connect.\n7. Deploy a Shiny app that displays real-time predictions\nAPI endpoint is used to serve predictions to a Shiny app interactively. Clicking on a station shows us a line graph of the time and predicted number of bikes.\n8. Create project dashboard\nThe team has created a dashboard for sharing the full context of this project.\n\nThanks for reading‚Ä¶"
  }
]